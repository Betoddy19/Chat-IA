import os
from dotenv import load_dotenv
from openai import OpenAI # Importante: A classe principal agora √© OpenAI

# --- Configura√ß√£o ---
# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# Inicializa o cliente da OpenAI.
# A chave da API ser√° lida automaticamente da vari√°vel de ambiente OPENAI_API_KEY.
# Certifique-se de que seu arquivo .env est√° na mesma pasta e tem a chave correta.
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# --- Fun√ß√£o Principal do Chat ---
def iniciar_chat():
    print("ü§ñ Chat IA iniciado! Digite 'sair' para encerrar.\n")

    # Lista para manter o hist√≥rico da conversa (opcional, mas bom para contexto)
    # Por enquanto, estamos enviando apenas a √∫ltima pergunta.
    # Se quiser hist√≥rico, voc√™ adicionaria {"role": "user", "content": pergunta}
    # e {"role": "assistant", "content": mensagem} aqui.
    
    while True:
        pergunta = input("Voc√™: ")
        if pergunta.lower() == "sair":
            print("üëã Encerrando o chat. At√© mais!")
            break

        try:
            # Faz a requisi√ß√£o √† API usando o novo cliente e sintaxe
            resposta = client.chat.completions.create(
                model="gpt-3.5-turbo", # Modelo que voc√™ estava usando
                messages=[{"role": "user", "content": pergunta}]
            )
            
            # Acessa a mensagem da resposta de forma diferente (√© um atributo, n√£o mais um item de dicion√°rio)
            mensagem = resposta.choices[0].message.content.strip()
            print("IA:", mensagem)

        except Exception as e:
            # Captura e exibe qualquer erro que ocorra na comunica√ß√£o com a OpenAI
            print(f"‚ö†Ô∏è Erro ao se comunicar com a OpenAI: {e}")
            print("Verifique sua chave de API, conex√£o com a internet e status da OpenAI.")

# --- Execu√ß√£o do Script ---
if __name__ == "__main__":
    iniciar_chat()